export default [
    {
        "title": "Home",
        "fileName": "index.html",
        "text": "Home Project Home Use the apexdox.homePagePath  setting to point to an HTML file that contains details about your project. The body of the HTML will show up here instead of this default!"
    },
    {
        "title": "CreationTacheRappelBatch",
        "fileName": "CreationTacheRappelBatch.html",
        "text": "CreationTacheRappelBatch Classe Apex pour la création de tâches de rappel pour les comptes sans tâches \"Call\" existantes. Implémente les interfaces Database.Batchable et Schedulable pour permettre l'exécution en lot planifié. Signature global class CreationTacheRappelBatch implements Database.Batchable<sObject>, Schedulable CreationTacheRappelBatch Methods execute(BC, scope) Méthode execute requise par l'interface Database.Batchable. Cette méthode est responsable de la création de nouvelles tâches \"Call\" pour les comptes. execute(ctx) Méthode execute requise par l'interface Schedulable. Cette méthode planifie l'exécution périodique du lot. finish(BC) Méthode finish requise par l'interface Database.Batchable. Cette méthode est appelée après l'exécution du lot, mais elle ne contient aucune action dans cette implémentation. start(BC) Méthode start requise par l'interface Database.Batchable. Cette méthode définit la requête pour récupérer les comptes sans commande associée. execute(BC, scope) Méthode execute requise par l'interface Database.Batchable. Cette méthode est responsable de la création de nouvelles tâches \"Call\" pour les comptes. Signature global void execute(Database.BatchableContext BC, List<Account> scope) Parameters BC Type: Database.BatchableContext Le contexte du lot. scope Type: List<Account> La liste des comptes à traiter. execute(ctx) Méthode execute requise par l'interface Schedulable. Cette méthode planifie l'exécution périodique du lot. Signature public void execute(SchedulableContext ctx) Parameters ctx Type: SchedulableContext Le contexte du planificateur. note: pour activer dans l'app le scheduler ci-dessous, il faut l'exécuter une fois dans la developper console: CreationTacheRappelBatch scheduler = new CreationTacheRappelBatch(); scheduler.execute(null); finish(BC) Méthode finish requise par l'interface Database.Batchable. Cette méthode est appelée après l'exécution du lot, mais elle ne contient aucune action dans cette implémentation. Signature global void finish(Database.BatchableContext BC) Parameters BC Type: Database.BatchableContext Le contexte du lot. start(BC) Méthode start requise par l'interface Database.Batchable. Cette méthode définit la requête pour récupérer les comptes sans commande associée. Signature global Database.QueryLocator start(Database.BatchableContext BC) Parameters BC Type: Database.BatchableContext Le contexte du lot. Returns Database.QueryLocator contenant les enregistrements à traiter."
    },
    {
        "title": "CreationTacheRappelBatchTest",
        "fileName": "CreationTacheRappelBatchTest.html",
        "text": "CreationTacheRappelBatchTest Classe de test Apex pour le lot(batch) CreationTacheRappelBatch. Signature @isTest private class CreationTacheRappelBatchTest CreationTacheRappelBatchTest Methods makeData() Méthode de configuration des données de test. testBatch() Méthode de test pour le lot(batch) CreationTacheRappelBatch. makeData() Méthode de configuration des données de test. Signature @TestSetup static void makeData() testBatch() Méthode de test pour le lot(batch) CreationTacheRappelBatch. Signature @isTest static void testBatch()"
    },
    {
        "title": "OrderTriggerHandler",
        "fileName": "OrderTriggerHandler.html",
        "text": "OrderTriggerHandler Classe Apex pour gérer les déclencheurs et les opérations associées aux objets Order. Signature public class OrderTriggerHandler OrderTriggerHandler Properties Name Signature Description ERROR_NO_PRODUCT public static final String ERROR_NO_PRODUCT Message d'erreur affiché lorsque la commande n'a pas de produits associés. OrderTriggerHandler Methods checkProductsBeforeActivation(newOrders, oldOrderMap) Vérifie si les produits sont associés avant d'activer une commande. updateAccountActiveStatus(deletedOrders) Met à jour le statut actif du compte en fonction des commandes supprimées. checkProductsBeforeActivation(newOrders, oldOrderMap) Vérifie si les produits sont associés avant d'activer une commande. Signature public static void checkProductsBeforeActivation(List<Order> newOrders, Map<Id, Order> oldOrderMap) Parameters newOrders Type: List<Order> Liste des nouvelles commandes. oldOrderMap Type: Map<Id, Order> Map des anciennes commandes. updateAccountActiveStatus(deletedOrders) Met à jour le statut actif du compte en fonction des commandes supprimées. Signature public static void updateAccountActiveStatus(List<Order> deletedOrders) Parameters deletedOrders Type: List<Order> Liste des commandes supprimées."
    },
    {
        "title": "OrderTriggerHandlerTest",
        "fileName": "OrderTriggerHandlerTest.html",
        "text": "OrderTriggerHandlerTest Classe de test Apex pour la classe OrderTriggerHandler. Signature @isTest public class OrderTriggerHandlerTest OrderTriggerHandlerTest Methods makeData() Méthode de configuration des données de test. testOrderActivationWithoutProducts() Méthode de test pour vérifier l'activation d'une commande sans produits associés. testUpdateAccountActiveStatus() Méthode de test pour vérifier la mise à jour du statut actif du compte après la suppression des commandes. makeData() Méthode de configuration des données de test. Signature @TestSetup static void makeData() testOrderActivationWithoutProducts() Méthode de test pour vérifier l'activation d'une commande sans produits associés. Signature @isTest static void testOrderActivationWithoutProducts() testUpdateAccountActiveStatus() Méthode de test pour vérifier la mise à jour du statut actif du compte après la suppression des commandes. Signature @isTest static void testUpdateAccountActiveStatus()"
    },
    {
        "title": "TestDataFactory",
        "fileName": "TestDataFactory.html",
        "text": "TestDataFactory Classe de test utilitaire pour la création de données de test dans les tests Apex. Signature @isTest public  class TestDataFactory TestDataFactory Methods createAccount(accountName, insertData) Crée un compte avec des options pour l'insertion dans la base de données. createManyAccountWithTask(accountName, NumberOfAccounts, withTask, insertData) Crée plusieurs comptes avec des options pour l'insertion dans la base de données. createOrder(accountId, insertData) Crée une commande avec des options pour l'insertion dans la base de données. createTask(whatId, insertData) Crée une tâche de rappel avec des options pour l'insertion dans la base de données. createAccount(accountName, insertData) Crée un compte avec des options pour l'insertion dans la base de données. Signature public static Account createAccount(String accountName, Boolean insertData) Parameters accountName Type: String Le nom du compte. insertData Type: Boolean Indique si le compte doit être inséré dans la base de données. Returns Account Le compte créé. createManyAccountWithTask(accountName, NumberOfAccounts, withTask, insertData) Crée plusieurs comptes avec des options pour l'insertion dans la base de données. Signature public static List<Account> createManyAccountWithTask(String accountName, Integer NumberOfAccounts, Boolean withTask, Boolean insertData) Parameters accountName Type: String Le nom de base pour les comptes. NumberOfAccounts Type: Integer Le nombre de comptes à créer. withTask Type: Boolean Indique si une tâche de rappel \"Call\" doit être associée à chaque compte. insertData Type: Boolean Indique si les comptes et les tâches de rappel doivent être insérés dans la base de données. Returns List<Account> La liste des comptes créés. createOrder(accountId, insertData) Crée une commande avec des options pour l'insertion dans la base de données. Signature public static Order createOrder(Id accountId, Boolean insertData) Parameters accountId Type: Id L'ID du compte associé à la commande. insertData Type: Boolean Indique si la commande doit être insérée dans la base de données. Returns Order La commande créée. createTask(whatId, insertData) Crée une tâche de rappel avec des options pour l'insertion dans la base de données. Signature public static Task createTask(String whatId, Boolean insertData) Parameters whatId Type: String L'ID de l'objet associé à la tâche de rappel. insertData Type: Boolean Indique si la tâche de rappel doit être insérée dans la base de données. Returns Task La tâche de rappel créée."
    }
];
